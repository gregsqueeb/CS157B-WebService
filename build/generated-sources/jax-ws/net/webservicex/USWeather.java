
package net.webservicex;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2-hudson-752-
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "USWeather", targetNamespace = "http://www.webserviceX.NET", wsdlLocation = "http://www.webservicex.net/usweather.asmx?WSDL")
public class USWeather
    extends Service
{

    private final static URL USWEATHER_WSDL_LOCATION;
    private final static WebServiceException USWEATHER_EXCEPTION;
    private final static QName USWEATHER_QNAME = new QName("http://www.webserviceX.NET", "USWeather");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://www.webservicex.net/usweather.asmx?WSDL");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        USWEATHER_WSDL_LOCATION = url;
        USWEATHER_EXCEPTION = e;
    }

    public USWeather() {
        super(__getWsdlLocation(), USWEATHER_QNAME);
    }

    public USWeather(WebServiceFeature... features) {
        super(__getWsdlLocation(), USWEATHER_QNAME, features);
    }

    public USWeather(URL wsdlLocation) {
        super(wsdlLocation, USWEATHER_QNAME);
    }

    public USWeather(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, USWEATHER_QNAME, features);
    }

    public USWeather(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public USWeather(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns USWeatherSoap
     */
    @WebEndpoint(name = "USWeatherSoap")
    public USWeatherSoap getUSWeatherSoap() {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherSoap"), USWeatherSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns USWeatherSoap
     */
    @WebEndpoint(name = "USWeatherSoap")
    public USWeatherSoap getUSWeatherSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherSoap"), USWeatherSoap.class, features);
    }

    /**
     * 
     * @return
     *     returns USWeatherSoap
     */
    @WebEndpoint(name = "USWeatherSoap12")
    public USWeatherSoap getUSWeatherSoap12() {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherSoap12"), USWeatherSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns USWeatherSoap
     */
    @WebEndpoint(name = "USWeatherSoap12")
    public USWeatherSoap getUSWeatherSoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherSoap12"), USWeatherSoap.class, features);
    }

    /**
     * 
     * @return
     *     returns USWeatherHttpGet
     */
    @WebEndpoint(name = "USWeatherHttpGet")
    public USWeatherHttpGet getUSWeatherHttpGet() {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherHttpGet"), USWeatherHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns USWeatherHttpGet
     */
    @WebEndpoint(name = "USWeatherHttpGet")
    public USWeatherHttpGet getUSWeatherHttpGet(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherHttpGet"), USWeatherHttpGet.class, features);
    }

    /**
     * 
     * @return
     *     returns USWeatherHttpPost
     */
    @WebEndpoint(name = "USWeatherHttpPost")
    public USWeatherHttpPost getUSWeatherHttpPost() {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherHttpPost"), USWeatherHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns USWeatherHttpPost
     */
    @WebEndpoint(name = "USWeatherHttpPost")
    public USWeatherHttpPost getUSWeatherHttpPost(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.webserviceX.NET", "USWeatherHttpPost"), USWeatherHttpPost.class, features);
    }

    private static URL __getWsdlLocation() {
        if (USWEATHER_EXCEPTION!= null) {
            throw USWEATHER_EXCEPTION;
        }
        return USWEATHER_WSDL_LOCATION;
    }

}
